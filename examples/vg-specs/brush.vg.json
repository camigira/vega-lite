{
    "$schema": "http://vega.github.io/schema/vega/v3.0.json",
    "description": "Drag out a rectangular brush to highlight points.",
    "autosize": "pad",
    "padding": 5,
    "data": [
        {
            "name": "brush_store"
        },
        {
            "name": "source_0",
            "url": "data/cars.json",
            "format": {
                "type": "json",
                "parse": {
                    "Horsepower": "number",
                    "Miles_per_Gallon": "number"
                }
            },
            "transform": [
                {
                    "type": "filter",
                    "expr": "datum[\"Horsepower\"] !== null && !isNaN(datum[\"Horsepower\"]) && datum[\"Miles_per_Gallon\"] !== null && !isNaN(datum[\"Miles_per_Gallon\"])"
                }
            ]
        }
    ],
    "signals": [
        {
            "name": "width",
            "update": "200"
        },
        {
            "name": "height",
            "update": "200"
        },
        {
            "name": "unit",
            "value": {},
            "on": [
                {
                    "events": "mousemove",
                    "update": "group()._id ? group() : unit"
                }
            ]
        }
    ],
    "marks": [
        {
            "name": "nested_main_group",
            "type": "group",
            "signals": [
                {
                    "name": "brush_x",
                    "value": [],
                    "on": [
                        {
                            "events": {
                                "source": "scope",
                                "type": "mousedown",
                                "filter": [
                                    "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                ]
                            },
                            "update": "[x(unit), x(unit)]"
                        },
                        {
                            "events": {
                                "source": "window",
                                "type": "mousemove",
                                "consume": true,
                                "between": [
                                    {
                                        "source": "scope",
                                        "type": "mousedown",
                                        "filter": [
                                            "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                        ]
                                    },
                                    {
                                        "source": "window",
                                        "type": "mouseup"
                                    }
                                ]
                            },
                            "update": "[brush_x[0], clamp(x(unit), 0, width)]"
                        },
                        {
                            "events": {
                                "signal": "brush_translate_delta"
                            },
                            "update": "clampRange([brush_translate_anchor.extent_x[0] + brush_translate_delta.x, brush_translate_anchor.extent_x[1] + brush_translate_delta.x], 0, unit.width)"
                        },
                        {
                            "events": {
                                "signal": "brush_zoom_delta"
                            },
                            "update": "clampRange([brush_zoom_anchor.x + (brush_x[0] - brush_zoom_anchor.x) * brush_zoom_delta, brush_zoom_anchor.x + (brush_x[1] - brush_zoom_anchor.x) * brush_zoom_delta], 0, unit.width)"
                        }
                    ]
                },
                {
                    "name": "brush_Horsepower",
                    "on": [
                        {
                            "events": {
                                "signal": "brush_x"
                            },
                            "update": "invert(\"x\", brush_x)"
                        }
                    ]
                },
                {
                    "name": "brush_y",
                    "value": [],
                    "on": [
                        {
                            "events": {
                                "source": "scope",
                                "type": "mousedown",
                                "filter": [
                                    "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                ]
                            },
                            "update": "[y(unit), y(unit)]"
                        },
                        {
                            "events": {
                                "source": "window",
                                "type": "mousemove",
                                "consume": true,
                                "between": [
                                    {
                                        "source": "scope",
                                        "type": "mousedown",
                                        "filter": [
                                            "!event.item || (event.item && event.item.mark.name !== \"brush_brush\")"
                                        ]
                                    },
                                    {
                                        "source": "window",
                                        "type": "mouseup"
                                    }
                                ]
                            },
                            "update": "[brush_y[0], clamp(y(unit), 0, height)]"
                        },
                        {
                            "events": {
                                "signal": "brush_translate_delta"
                            },
                            "update": "clampRange([brush_translate_anchor.extent_y[0] + brush_translate_delta.y, brush_translate_anchor.extent_y[1] + brush_translate_delta.y], 0, unit.height)"
                        },
                        {
                            "events": {
                                "signal": "brush_zoom_delta"
                            },
                            "update": "clampRange([brush_zoom_anchor.y + (brush_y[0] - brush_zoom_anchor.y) * brush_zoom_delta, brush_zoom_anchor.y + (brush_y[1] - brush_zoom_anchor.y) * brush_zoom_delta], 0, unit.height)"
                        }
                    ]
                },
                {
                    "name": "brush_Miles_per_Gallon",
                    "on": [
                        {
                            "events": {
                                "signal": "brush_y"
                            },
                            "update": "invert(\"y\", brush_y)"
                        }
                    ]
                },
                {
                    "name": "brush",
                    "update": "[{encoding: \"x\", field: \"Horsepower\", extent: brush_Horsepower}, {encoding: \"y\", field: \"Miles_per_Gallon\", extent: brush_Miles_per_Gallon}]"
                },
                {
                    "name": "brush_translate_anchor",
                    "value": {},
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "scope",
                                    "type": "mousedown",
                                    "markname": "brush_brush"
                                }
                            ],
                            "update": "{x: x(unit), y: y(unit), extent_x: slice(brush_x), extent_y: slice(brush_y)}"
                        }
                    ]
                },
                {
                    "name": "brush_translate_delta",
                    "value": {},
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "window",
                                    "type": "mousemove",
                                    "consume": true,
                                    "between": [
                                        {
                                            "source": "scope",
                                            "type": "mousedown",
                                            "markname": "brush_brush"
                                        },
                                        {
                                            "source": "window",
                                            "type": "mouseup"
                                        }
                                    ]
                                }
                            ],
                            "update": "{x: x(unit) - brush_translate_anchor.x, y: y(unit) - brush_translate_anchor.y}"
                        }
                    ]
                },
                {
                    "name": "brush_zoom_anchor",
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "scope",
                                    "type": "wheel",
                                    "markname": "brush_brush"
                                }
                            ],
                            "update": "{x: x(unit), y: y(unit)}"
                        }
                    ]
                },
                {
                    "name": "brush_zoom_delta",
                    "on": [
                        {
                            "events": [
                                {
                                    "source": "scope",
                                    "type": "wheel",
                                    "markname": "brush_brush"
                                }
                            ],
                            "force": true,
                            "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
                        }
                    ]
                },
                {
                    "name": "brush_tuple",
                    "on": [
                        {
                            "events": {
                                "signal": "brush"
                            },
                            "update": "{unit: unit.datum && unit.datum._id, intervals: brush}"
                        }
                    ]
                },
                {
                    "name": "brush_modify",
                    "on": [
                        {
                            "events": {
                                "signal": "brush"
                            },
                            "update": "modify(\"brush_store\", brush_tuple, true)"
                        }
                    ]
                }
            ],
            "encode": {
                "update": {
                    "width": {
                        "signal": "width"
                    },
                    "height": {
                        "signal": "height"
                    },
                    "fill": {
                        "value": "transparent"
                    }
                }
            },
            "marks": [
                {
                    "type": "rect",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "#333"
                            },
                            "fillOpacity": {
                                "value": 0.125
                            }
                        },
                        "update": {
                            "x": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_x[0]"
                                },
                                {
                                    "value": 0
                                }
                            ],
                            "y": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_y[0]"
                                },
                                {
                                    "value": 0
                                }
                            ],
                            "x2": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_x[1]"
                                },
                                {
                                    "value": 0
                                }
                            ],
                            "y2": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_y[1]"
                                },
                                {
                                    "value": 0
                                }
                            ]
                        }
                    }
                },
                {
                    "name": "marks",
                    "type": "symbol",
                    "role": "point",
                    "from": {
                        "data": "source_0"
                    },
                    "encode": {
                        "update": {
                            "x": {
                                "scale": "x",
                                "field": "Horsepower"
                            },
                            "y": {
                                "scale": "y",
                                "field": "Miles_per_Gallon"
                            },
                            "stroke": [
                                {
                                    "test": "!vlInterval(\"brush_store\", parent._id, datum, \"union\", \"all\")",
                                    "value": "grey"
                                },
                                {
                                    "scale": "color",
                                    "field": "Cylinders"
                                }
                            ],
                            "fill": {
                                "value": "transparent"
                            },
                            "opacity": {
                                "value": 0.7
                            }
                        }
                    }
                },
                {
                    "name": "brush_brush",
                    "type": "rect",
                    "encode": {
                        "enter": {
                            "fill": {
                                "value": "transparent"
                            },
                            "stroke": {
                                "value": "white"
                            }
                        },
                        "update": {
                            "x": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_x[0]"
                                },
                                {
                                    "value": 0
                                }
                            ],
                            "y": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_y[0]"
                                },
                                {
                                    "value": 0
                                }
                            ],
                            "x2": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_x[1]"
                                },
                                {
                                    "value": 0
                                }
                            ],
                            "y2": [
                                {
                                    "test": "data(\"brush_store\").length && brush_tuple && brush_tuple.unit === data(\"brush_store\")[0].unit",
                                    "signal": "brush_y[1]"
                                },
                                {
                                    "value": 0
                                }
                            ]
                        }
                    }
                }
            ]
        }
    ],
    "scales": [
        {
            "name": "x",
            "type": "linear",
            "domain": {
                "data": "source_0",
                "field": "Horsepower"
            },
            "range": [
                0,
                200
            ],
            "round": true,
            "nice": true,
            "zero": true
        },
        {
            "name": "y",
            "type": "linear",
            "domain": {
                "data": "source_0",
                "field": "Miles_per_Gallon"
            },
            "range": [
                200,
                0
            ],
            "round": true,
            "nice": true,
            "zero": true
        },
        {
            "name": "color",
            "type": "ordinal",
            "domain": {
                "data": "source_0",
                "field": "Cylinders",
                "sort": true
            },
            "range": "ordinal"
        }
    ],
    "axes": [
        {
            "scale": "x",
            "format": "s",
            "orient": "bottom",
            "tickCount": 5,
            "title": "Horsepower",
            "zindex": 1
        },
        {
            "scale": "x",
            "domain": false,
            "format": "s",
            "grid": true,
            "labels": false,
            "orient": "bottom",
            "tickCount": 5,
            "ticks": false,
            "zindex": 0,
            "gridScale": "y"
        },
        {
            "scale": "y",
            "format": "s",
            "orient": "left",
            "title": "Miles_per_Gallon",
            "zindex": 1
        },
        {
            "scale": "y",
            "domain": false,
            "format": "s",
            "grid": true,
            "labels": false,
            "orient": "left",
            "ticks": false,
            "zindex": 0,
            "gridScale": "x"
        }
    ],
    "legends": [
        {
            "stroke": "color",
            "title": "Cylinders"
        }
    ]
}